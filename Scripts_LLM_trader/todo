+ threading, v2 paralel çalışabilir -> mutexlockları database.py'ların içinde tutlmalı bunun için singulten patterne çevirmemiz mantıklı olabilir. !!threading için sqlite çakışma olabilir çünkü
+ output tokenlerini azalt
+ db'yi iyileştir
+ fix v2
+ bot responselarını ve token harcamalarını bir google sheets'e gönderebiliriz -> lokal chat.db yaratıldı
+ alpin csvlerle nasıl kayıt tuttuğuna bak belki sonra
+ dir management holly hell
- repoda ve linuxta test branchi aç testler yaz belki -> Şimdilik verilecek zamana değmiyor
+ importları düzelt
+ headlines.db'deki tarih parametre olarak alınmalı, eklenme zamanı değil
+ headlines.db'sini silebiliriz belki -> silmesek daha iyi yoksa katogerizasyon mümkün olmaz --> headline değil ama chat_cache silinebilir 


*** main_eod.py value giriyorken haftasonu None döndürüyor. Script None değerleri doldurmayı denedeği için haftasonları sonsuz kadar backpilelanıyor. 
*** Backtesting
** eğerki headerların tickerlarını eşlersek sonradan 10 kere daha tekrar bütün headerları llm'lere atmamız gerekmez sadece gerekenleri atarız. Bunun için headerları sınıflandıran bir amele llm lazım.
** Haftanın başlığı seklinde bir sınıflandırma ile geçmişten gelen önemli headline'ları tekrar yedirip kaliteyi arttırmayı deneyebiliriz
** telegram test grubu, config ayarları
** Market valuelar ekleniyorken Close, EOD gelmemiş bir tarihe eklenmemeli
* Eğerki headlineları sınıflandırmak için bir program yazarsak; oradan elde ettiğimiz veri ile ticker için fazla haberin olduğu günleri kritik günler diye sınıflandırıp bundan volatilite artışı bekleyebiliriz;
* can I retrieve chat_cahce from openai api, and delete our db?
* market verilerini de llmlere gönderebiliriz